"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[1381],{81381:(e,n,o)=>{o.r(n),o.d(n,{default:()=>R});var t=o(37859),a=o(83203),r=o(8966),l=o(679),i=o(6384),s=o(83331),c=o(4775),v=o(39649),u=o(26418),d=o(10502),p=o(7590);let m=new d.$(p.xR,{vertex:"\n  attribute vec3 position;\n  attribute vec2 uv;\n  \n  uniform mat4 modelMatrix;\n  uniform mat4 modelViewMatrix;\n  uniform mat4 projectionMatrix;\n  \n  uniform mat4 shadowViewMatrix;\n  uniform mat4 shadowProjectionMatrix;\n  uniform float aspect;\n  \n  varying vec2 vUv;\n  varying vec4 vLightNDC;\n  \n  // Matrix to shift range from -1->1 to 0->1\n  const mat4 depthScaleMatrix = mat4(\n      0.5, 0, 0, 0,\n      0, 0.5, 0, 0,\n      0, 0, 0.5, 0,\n      0.5, 0.5, 0.5, 1\n  );\n  \n  void main() {\n    vUv = uv;\n    vec3 adjustedPosition = vec3(position.x * aspect, position.y, position.z);\n\n    // Calculate the NDC (normalized device coords) for the light to compare against shadowmap\n      vLightNDC = depthScaleMatrix * shadowProjectionMatrix * shadowViewMatrix * modelMatrix * vec4(adjustedPosition, 1.0);\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n  }\n  ",fragment:"\n  precision highp float;\n  \n  uniform sampler2D tShadow;\n  uniform float aspect;\n  \n  varying vec2 vUv;\n  varying vec4 vLightNDC;\n  \n  float unpackRGBA (vec4 v) {\n      return dot(v, 1.0 / vec4(1.0, 255.0, 65025.0, 16581375.0));\n  }\n  \n  void main() {\n      vec3 lightPos = vLightNDC.xyz / vLightNDC.w;\n      vec2 lightUv = lightPos.xy;\n  \n      // the depth map from the light's perspective\n      float occluder = unpackRGBA(texture2D(tShadow, lightUv));\n      \n      // Compare actual depth from light to the occluded depth rendered in the depth map\n      // If the occluded depth is smaller, we must be in shadow\n      float bias = 0.001;\n      float depth = lightPos.z - bias;\n      float shadow = mix(0.0, 1.0, step(depth, occluder));\n\n      gl_FragColor = vec4(1.);\n      gl_FragColor.r = shadow;\n      // G should be in range from 0 to 1\n      float depthBias = 0.;\n      float depthScale = 1.0;\n      float distanceToShadow = (depth - occluder + depthBias) * depthScale;\n      gl_FragColor.g = clamp(distanceToShadow, 0.0, 1.0);\n\n      if(shadow > 0.0) {\n        gl_FragColor.g = 1.0;\n      }\n  }\n  ",uniforms:{aspect:{value:1},tShadow:{value:null},shadowViewMatrix:{value:null},shadowProjectionMatrix:{value:null}}});var h=o(56233);let x=(e,n)=>{e.disable(e.SCISSOR_TEST),n(),e.enable(e.SCISSOR_TEST)},f=new c.A(10,15,15),g=new c.A(10,15,15),w=f.distance(new c.A(0,0,0)),b=()=>{let e=(0,i.G)(e=>e.shadowScene),n=(0,i.G)(e=>e.light),o=(0,i.G)(e=>e.shadowRenderer),a=(0,i.G)(e=>e.dayProgress);return(0,s.useEffect)(()=>{e.traverse(e=>{e instanceof v.K&&o.add({mesh:e,cast:!0,receive:!1})})},[e]),(0,r.xQ)(()=>{let t=(0,h.ol)(a.current,0,1,15,0);g.y=t,g.normalize().multiply(w),n.position.copy(g),n.lookAt([0,0,0]),x(o.gl,()=>{o.render({scene:e})})}),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)("primitive",{object:n,dispose:null,position:g}),(0,l.jz)((0,t.jsx)(u.g,{}),e)]})},y=()=>{let e=(0,r.Cp)(e=>e.renderer),n=(0,i.G)(e=>e.shadowBurnerScene),o=(0,i.G)(e=>e.shadowBurnerCamera),a=(0,i.G)(e=>e.shadowBurnerFbo),c=(0,i.G)(e=>e.shadowBurnerCameraSize),u=(0,i.G)(e=>e.shadowRenderer),d=(0,r.Cp)(e=>e.gl),p=(0,s.useMemo)(()=>new v.K(d),[d]);(0,s.useEffect)(()=>{u.add({mesh:p,cast:!1,receive:!0})},[]);let h=(0,i.G)(e=>e.aspect);return(0,r.xQ)(()=>{m.uniforms.tShadow.value&&(m.uniforms.aspect.value=h,x(e.gl,()=>{e.render({camera:o,scene:n,target:a})}))}),(0,t.jsx)(t.Fragment,{children:(0,l.jz)((0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)("primitive",{dispose:null,object:o}),(0,t.jsxs)("primitive",{dispose:null,object:p,children:[(0,t.jsx)("plane",{args:[{width:2*c,height:2*c}]}),(0,t.jsx)("primitive",{dispose:null,object:m})]})]}),n)})};var C=o(92915),S=o(92560),z=o(40645),M=o(71570);let j=new d.$(p.xR,{vertex:"\n    attribute vec3 position;\n    attribute vec2 uv;\n\n    uniform mat4 modelViewMatrix;\n    uniform mat4 projectionMatrix;\n\n    varying vec2 vUv;\n    \n    void main() {\n      vUv = uv;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n  ",fragment:"\n    precision highp float;\n    \n    uniform sampler2D shadowMap;\n    uniform float aspect;\n    uniform float dayProgress;\n    uniform float pixelRatio;\n\n    uniform vec3 sunsetColor;\n    uniform vec3 nightfallColor;\n    uniform float alphaFactor;\n\n    varying vec2 vUv;\n\n    const float PI = 3.14159265359;\n\n    ".concat("\nvec3 rand(vec2 uv) {\n  return vec3(\n    fract(sin(dot(uv, vec2(12.75613, 38.12123))) * 13234.76575),\n    fract(sin(dot(uv, vec2(19.45531, 58.46547))) * 43678.23431),\n    fract(sin(dot(uv, vec2(23.67817, 78.23121))) * 93567.23423)\n  );\n}\n\nfloat randf(vec2 uv) {\n  return fract(sin(dot(uv, vec2(12.75613, 38.12123))) * 13234.76575);\n}\n","\n    ").concat(M.D,"\n    ").concat("\n\nvec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\n\nvec4 mod289(vec4 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\n\nvec4 permute(vec4 x) { return mod289(((x * 34.0) + 1.0) * x); }\n\nvec4 taylorInvSqrt(vec4 r) { return 1.79284291400159 - 0.85373472095314 * r; }\n\nfloat snoise(vec3 v){ \n	const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n	const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n	vec3 i  = floor(v + dot(v, C.yyy) );\n	vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n	vec3 g = step(x0.yzx, x0.xyz);\n	vec3 l = 1.0 - g;\n	vec3 i1 = min( g.xyz, l.zxy );\n	vec3 i2 = max( g.xyz, l.zxy );\n\n	//  x0 = x0 - 0. + 0.0 * C \n	vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n	vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n	vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n// Permutations\n	i = mod(i, 289.0 ); \n	vec4 p = permute( permute( permute( \n						 i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n					 + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n					 + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients\n// ( N*N points uniformly over a square, mapped onto an octahedron.)\n	float n_ = 1.0/7.0; // N=7\n	vec3  ns = n_ * D.wyz - D.xzx;\n\n	vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\n\n	vec4 x_ = floor(j * ns.z);\n	vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n	vec4 x = x_ *ns.x + ns.yyyy;\n	vec4 y = y_ *ns.x + ns.yyyy;\n	vec4 h = 1.0 - abs(x) - abs(y);\n\n	vec4 b0 = vec4( x.xy, y.xy );\n	vec4 b1 = vec4( x.zw, y.zw );\n\n	vec4 s0 = floor(b0)*2.0 + 1.0;\n	vec4 s1 = floor(b1)*2.0 + 1.0;\n	vec4 sh = -step(h, vec4(0.0));\n\n	vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n	vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n	vec3 p0 = vec3(a0.xy,h.x);\n	vec3 p1 = vec3(a0.zw,h.y);\n	vec3 p2 = vec3(a1.xy,h.z);\n	vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n	vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n	p0 *= norm.x;\n	p1 *= norm.y;\n	p2 *= norm.z;\n	p3 *= norm.w;\n\n// Mix final noise value\n	vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n	m = m * m;\n	return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n																dot(p2,x2), dot(p3,x3) ) );\n}\n\nfloat snoise(vec3 v, float minNoise, float maxNoise) {\n	return snoise(v) * (maxNoise - minNoise) + minNoise;\n}\n","\n    ").concat("\nconst int totalSamples = 20;\nconst float GOLDEN_ANGLE = 2.399963229728653; // Approximately 137.5 degrees in radians\n\n// Function to calculate disk samples based on Vogel's method\nvec2 vogelDiskSample(int sampleIndex, int totalSamples, float offsetAngle) {\n    float r = sqrt(float(sampleIndex) + 0.5) / sqrt(float(totalSamples)); // Radial component\n    float theta = float(sampleIndex) * GOLDEN_ANGLE + offsetAngle; // Angular component\n\n    return vec2(cos(theta), sin(theta)) * r;\n}\n\n// Gaussian weight calculation remains the same\nfloat blurGaussian(float x, float blurSigma) {\n    return exp(-0.5 * (x * x) / (blurSigma * blurSigma)) / (2.0 * 3.14159265 * blurSigma * blurSigma);\n}\n\nvec4 shadowBlur(sampler2D image, vec2 uv, vec2 resolution, float blurSize) {\n  vec2 pixelCoord = uv * resolution;\n\n  float random = randf(uv) * 20.;\n  \n  vec4 gaussSum = vec4(0.);\n  float weightSum = 0.;\n\n  for(int i = 0; i < totalSamples; i++) {\n      vec2 sampleOffset = vogelDiskSample(i, totalSamples, random) * blurSize;\n      vec2 newUV = (pixelCoord + sampleOffset) / resolution;\n      vec4 newTexCol = texture2D(image, newUV);\n      newTexCol.r = 1. - newTexCol.r;\n\n      // The bigger, the more blur;\n      float gFact = valueRemap(newTexCol.g, 0.1, 0.5, 0.0, 1.0);\n      gFact = clamp(gFact, 0.0, 1.0);\n      gFact = 2.0 + gFact * blurSize;\n\n      // min 3 max 100\n      float weight = blurGaussian(length(sampleOffset), gFact);\n\n      gaussSum += newTexCol * weight;\n      weightSum += weight;\n  }\n\n  float scaler = 0.5;\n\n  for(int i = 1; i < totalSamples; i++) {\n    vec2 sampleOffset = vogelDiskSample(i, totalSamples, random + 10.) * blurSize * scaler;\n    vec2 newUV = (pixelCoord + sampleOffset) / resolution;\n    vec4 newTexCol = texture2D(image, newUV);\n    newTexCol.r = 1. - newTexCol.r;\n\n    // The bigger, the more blur;\n    float gFact = valueRemap(newTexCol.g, 0.0, 0.3, 0.5, 1.0);\n    gFact = clamp(gFact, 0.0, 1.0);\n    gFact = 2.0 + gFact * blurSize * scaler;\n\n    // min 3 max 100\n    float weight = blurGaussian(length(sampleOffset), gFact) * scaler;\n\n    gaussSum += newTexCol * weight;\n    weightSum += weight;\n}\n\n  gaussSum /= weightSum;\n\n  return gaussSum;\n}\n","\n\n    vec3 rgb(float r, float g, float b) {\n      return vec3(r, g, b) / 255.0;\n    }\n\n    vec3 rgb(int r, int g, int b) {\n      return vec3(float(r), float(g), float(b)) / 255.0;\n    }\n\n    /* Given the begin and end interval the output goes from 0 -> 1 -> 0 */\n    float getDayProgressOld(float begin, float end) {\n      float p = valueRemap(dayProgress, begin, end, 0.0, 1.0);\n      p = clamp(p, 0.01, 0.99);\n      p = sin(p * PI);\n      // p = pow(p, 0.5);\n      return p;\n    }\n\n    /* Given the begin and end interval the output goes from 0 -> 1 */\n    float getDayProgress(float begin, float end) {\n      float p = valueRemap(dayProgress, begin, end, 0.0, 1.0);\n      p = clamp(p, 0.0, 1.0);\n      // p = pow(p, 2.0);\n      return p;\n    }\n\n    void main() {\n      vec2 aspectUv = vUv * vec2(aspect, 1.0);\n\n      float noise = snoise(vec3(aspectUv * 9000., 0.), 0.0, 0.3);\n      noise *= snoise(vec3(aspectUv * 1000., 0.), 0., 1.);\n\n      float sunsetProgress = getDayProgress(0.2, 0.35);\n      float nightfallProgress = getDayProgress(0.6, 1.);\n\n      vec4 shadowSample = texture2D(shadowMap, vUv);\n\n      float blurSize = valueRemap(vUv.x, 0.0, 1.0, 70.0, 20. / pixelRatio);\n      float shadowMultiplier = valueRemap(pow(vUv.x, 1.5), 0.0, 1.0, 0.0, 0.9);\n\n      vec4 blurredShadow = shadowBlur(shadowMap, vUv, vec2(1024.0, 1024.0), blurSize);\n\n      float shadow = blurredShadow.r;\n      shadow -= noise;\n      shadow = valueRemap(shadow, 0.0, 1.0, 0.0, 0.8);\n      shadow *= shadowMultiplier;\n      shadow = clamp(shadow, 0.0, 1.0);\n      // 0 is no shadow, 1 is full shadow\n\n      vec3 lightColor = vec3(1.);\n      \n      vec3 dayColor = vec3(1., 1., 1.);\n\n      lightColor = mix(dayColor, sunsetColor, sunsetProgress);\n      lightColor = mix(lightColor, nightfallColor, nightfallProgress);\n\n      /* This helps to control the contrast between the wall color and the blended shadow */\n      float shadowFactor = mix(0.4, 0.2, nightfallProgress);\n\n      vec3 shadowColor = mix(lightColor, dayColor, 0.5) * shadowFactor;\n      vec3 color = mix(lightColor, shadowColor, shadow * 0.7);\n\n      float alpha = valueRemap(vUv.x + vUv.y, 0.0, 2.0, 0.8, 1.0);\n\n      gl_FragColor = vec4(color, alpha * alphaFactor);\n    }\n  "),uniforms:{aspect:{value:1},shadowMap:{value:null},dayProgress:{value:0},sunsetColor:{value:[0,0,0]},nightfallColor:{value:[0,0,0]},alphaFactor:{value:0},pixelRatio:{value:1}},transparent:!0});var P=o(93136),F=o(86108);let D=()=>{let e=(0,z.f)(e=>e.shadowSceneActive),n=(0,z.f)(e=>e.hasRendered),o=(0,i.G)(e=>e.aspect),a=(0,i.G)(e=>e.setAspect),l=(0,i.G)(e=>e.shadowBurnerFbo),c=(0,i.G)(e=>e.dayProgress),v=(0,s.useRef)(null),{sunsetColor:u,nightfallColor:d}=(0,S.M4)("Light",{sunsetColor:{value:"#ffb681"},nightfallColor:{value:"#2e3941"}});(0,r.xQ)(e=>{let{size:n}=e,t=n.width/n.height;o!==t&&(a(t),z.f.setState({aspect:t}))});let p=(0,s.useRef)({aspect:{value:o},shadowMap:{value:l.texture},sunsetColor:{value:u},nightfallColor:{value:d},alphaFactor:{value:0},pixelRatio:{value:window.devicePixelRatio}});return(0,P.ui)(()=>{let e=(0,h.jM)(40,100,60),n={value:0},o={value:0},t=()=>{c.current=.5*n.value+.5*o.value,j.uniforms.dayProgress.value=c.current},a=C.ZP.fromTo(n,{value:0},{id:"day-control",duration:1,value:1,ease:"power1.inOut",onUpdate:t,scrollTrigger:{trigger:"#h-scroll-outside-features",start:"top-=".concat(e/2+"%"," bottom"),end:"bottom+=".concat(e/2+"%"," bottom-=50%"),scrub:!0}}),r=C.ZP.fromTo(o,{value:0},{id:"night-control",duration:1,value:1,ease:"power1.inOut",onUpdate:t,repeatRefresh:!0,scrollTrigger:{trigger:"#h-scroll-last-extra-space",start:"top top",end:"bottom top",scrub:!0}});(0,F.f)(a,{label:"Day control"}),(0,F.f)(r,{label:"Night control"})},{revertOnUpdate:!0}),(0,P.ui)(()=>{n&&C.ZP.fromTo(j.uniforms.alphaFactor,{value:0},{onStart:()=>{v.current&&(v.current.visible=!0)},value:1,duration:2,ease:"power2.out"})},{dependencies:[n],revertOnUpdate:!0}),(0,t.jsxs)("mesh",{position:[0,e?0:100,0],visible:!1,ref:v,children:[(0,t.jsx)("plane",{args:[{width:10*o,height:10}]}),(0,t.jsx)("primitive",{dispose:null,object:j,uniforms:p.current})]})};var G=o(7539);let R=function(){return(0,a.q)(e=>e.reducedMotion)?null:(0,t.jsxs)(G.X.In,{id:"wall-shadow",children:[(0,t.jsx)(D,{}),(0,t.jsx)(b,{}),(0,t.jsx)(y,{})]})}},71570:(e,n,o)=>{o.d(n,{D:()=>t});let t="\nfloat valueRemap(float value, float inMin, float inMax, float outMin, float outMax) {\n  return ((value - inMin) * (outMax - outMin)) / (inMax - inMin) + outMin;\n}\n"}}]);